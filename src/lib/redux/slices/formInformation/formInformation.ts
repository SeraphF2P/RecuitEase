/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'
import { toast } from '~/lib/myToast'
import type { questionDetailsType } from '~/lib/ZOD'

/* Instruments */

const initialState: FormInformationSliceState = {
  coverImageUrl: "",
  fields: [
    { name: "first_name", isRequired: false, isShowen: true },
    { name: "last_name", isRequired: false, isShowen: true },
    { name: "email", isRequired: false, isShowen: true },
    { name: "phone_number", isRequired: false, isShowen: true },
    { name: "nationality", isRequired: false, isShowen: true },
    { name: "current_residence", isRequired: false, isShowen: true },
    { name: "date_of_birth", isRequired: false, isShowen: true },
    { name: "gender", isRequired: false, isShowen: true }
  ],
  questions: []
}


export const formInformationSlice = createSlice({
  name: 'formInformation',
  initialState,
  reducers: {
    uploadCoverImage: (state, action: PayloadAction<string>) => {
      state.coverImageUrl = action.payload
    },
    update: (state, action: PayloadAction<FormInformationSliceState["fields"][number]>) => {
      let field = state.fields.find(field => field.name == action.payload.name)
      if (field) {
        field = action.payload
      }
    },
    createQues: (state, action: PayloadAction<questionDetailsType>) => {
      state.questions.push({ id: crypto.randomUUID(), ...action.payload })
    },
    updateQues: (state, action: PayloadAction<questionDetailsType & { id: string }>) => {
      const index = state.questions.findIndex(qus => qus.id == action.payload.id)
      if (index !== -1) {
        state.questions[index] = action.payload
      } else {
        toast({ type: "error", message: "questions not found" })
      }
    },
    deleteQues: (state, action: PayloadAction<{ id: string }>) => {
      const index = state.questions.findIndex(qus => qus.id == action.payload.id)
      if (index !== -1) {
        state.questions.splice(index, 1)
      } else {
        toast({ type: "error", message: "questions not  found" })
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

})

/* Types */


export type FormInformationSliceState = {
  coverImageUrl: string
  fields: { name: string, isRequired: boolean, isShowen: boolean }[],
  questions: (questionDetailsType & { id: string })[]
}
